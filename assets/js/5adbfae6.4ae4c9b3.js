/*! For license information please see 5adbfae6.4ae4c9b3.js.LICENSE.txt */
"use strict";(self.webpackChunkreact_native_website=self.webpackChunkreact_native_website||[]).push([[662],{23428:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var s=n(24246),t=n(71670);const i={id:"release-updating-packages",title:"Updating monorepo packages"},o=void 0,c={id:"release-updating-packages",title:"Updating monorepo packages",description:"This page contains relevant information about how to update packages in the react-native monorepo.",source:"@site/contributing/release-updating-packages.md",sourceDirName:".",slug:"/release-updating-packages",permalink:"/contributing/release-updating-packages",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/react-native-website/blob/main/website/contributing/release-updating-packages.md",tags:[],version:"current",lastUpdatedAt:1704504779,formattedLastUpdatedAt:"Jan 6, 2024",frontMatter:{id:"release-updating-packages",title:"Updating monorepo packages"},sidebar:"contributing",previous:{title:"Troubleshooting",permalink:"/contributing/release-troubleshooting"}},r={},d=[{value:"Finding all packages that have unpublished changes",id:"finding-all-packages-that-have-unpublished-changes",level:2},{value:"Use case",id:"use-case",level:4},{value:"How to execute",id:"how-to-execute",level:4},{value:"Pseudocode",id:"pseudocode",level:4},{value:"Notes",id:"notes",level:3},{value:"Publishing an updated package to npm",id:"publishing-an-updated-package-to-npm",level:2},{value:"Pseudocode",id:"pseudocode-1",level:4},{value:"Notes",id:"notes-1",level:4},{value:"Align package versions across monorepo",id:"align-package-versions-across-monorepo",level:2},{value:"Use case",id:"use-case-1",level:4},{value:"How to execute",id:"how-to-execute-1",level:4},{value:"Pseudocode",id:"pseudocode-2",level:4}];function l(e){const a=Object.assign({p:"p",code:"code",a:"a",admonition:"admonition",h2:"h2",h4:"h4",ol:"ol",li:"li",pre:"pre",h3:"h3",strong:"strong"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(a.p,{children:["This page contains relevant information about how to update packages in the ",(0,s.jsx)(a.code,{children:"react-native"})," ",(0,s.jsx)(a.a,{href:"https://github.com/react-native-community/discussions-and-proposals/pull/480",children:"monorepo"}),"."]}),"\n",(0,s.jsx)(a.admonition,{type:"note",children:(0,s.jsxs)(a.p,{children:["From 0.72 onwards, all packages versions should be updated and aligned by using ",(0,s.jsx)(a.code,{children:"bump-all-updated-packages"})," script, both in ",(0,s.jsx)(a.code,{children:"main"})," and ",(0,s.jsx)(a.code,{children:"*-stable"})," branches.\nPractically, this means that the secondary command ",(0,s.jsx)(a.code,{children:"align-package-versions"})," is only present in the 0.71 branch - and neither are present in versions lower than that."]})}),"\n",(0,s.jsx)(a.h2,{id:"finding-all-packages-that-have-unpublished-changes",children:"Finding all packages that have unpublished changes"}),"\n",(0,s.jsx)(a.h4,{id:"use-case",children:"Use case"}),"\n",(0,s.jsxs)(a.ol,{children:["\n",(0,s.jsxs)(a.li,{children:["You want to identify each package with unpublished (on npm) changes and update its version. This can be used in release cycle if you have merged some fixes to ",(0,s.jsx)(a.code,{children:"*-stable"})," branch."]}),"\n",(0,s.jsxs)(a.li,{children:["You want to force-bump each public package to the next minor version. This happens usually before release branch cutoff. In this case, please specify ",(0,s.jsx)(a.code,{children:"release-branch-cutoff"})," argument before executing the script."]}),"\n"]}),"\n",(0,s.jsx)(a.h4,{id:"how-to-execute",children:"How to execute"}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.code,{children:"yarn bump-all-updated-packages"})," or ",(0,s.jsx)(a.code,{children:"yarn bump-all-updated-packages --release-branch-cutoff"})]}),"\n",(0,s.jsx)(a.h4,{id:"pseudocode",children:"Pseudocode"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{children:"check that no git changes are present\n\nfor each package:\n    if package is private -> skip\n\n    if release-branch-cutoff argument is provided:\n        bump package version to the next minor\n        return\n\n    grep id of the last commit that changed package\n    grep id of the last commit that changed version of the package\n\n    if these ids are different:\n        bump package version (minor or patch)\n\nalign packages versions across whole monorepo\ncommit changes if required\n"})}),"\n",(0,s.jsx)(a.h3,{id:"notes",children:"Notes"}),"\n",(0,s.jsxs)(a.p,{children:["At the final step you will be asked if you want to commit all these changes. Always confirm committing if you want these packages to be published then on CircleCI, because the workflow that does this ",(0,s.jsx)(a.a,{href:"https://github.com/facebook/react-native/wiki/Release-and-its-automated-processes#notes-1",children:"will check that commit has a tag inside its message"}),"."]}),"\n",(0,s.jsxs)(a.p,{children:["Updated versions will also be updated in packages consumers. This means if ",(0,s.jsx)(a.code,{children:"@react-native/x"})," has ",(0,s.jsx)(a.code,{children:"@react-native/y"})," as a dependency and we bump version of ",(0,s.jsx)(a.code,{children:"@react-native/y"}),", then ",(0,s.jsx)(a.code,{children:"@react-native/x"})," will have updated version of ",(0,s.jsx)(a.code,{children:"@react-native/y"})," specified."]}),"\n",(0,s.jsx)(a.h2,{id:"publishing-an-updated-package-to-npm",children:"Publishing an updated package to npm"}),"\n",(0,s.jsxs)(a.p,{children:["We have a ",(0,s.jsx)(a.a,{href:"https://github.com/facebook/react-native/blob/292268ea3fa429cd1a1245b6239e0a85b59da02a/.circleci/config.yml#L1801-L1804",children:"CircleCI workflow"}),", which runs ",(0,s.jsx)(a.strong,{children:"only on main or stable-* branches"}),"."]}),"\n",(0,s.jsx)(a.h4,{id:"pseudocode-1",children:"Pseudocode"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{children:"for each package:\n    if last commit contains version change:\n        if this commit has specific message:\n            publish package to npm\n"})}),"\n",(0,s.jsx)(a.h4,{id:"notes-1",children:"Notes"}),"\n",(0,s.jsxs)(a.p,{children:["This workflow explicitly checks that commit has a specific ",(0,s.jsx)(a.a,{href:"https://github.com/facebook/react-native/blob/main/scripts/monorepo/constants.js#L11",children:"tag"})," inside its message. This is used to prevent accidental publishes. To create such specific commit you should use ",(0,s.jsx)(a.a,{href:"https://github.com/facebook/react-native/wiki/Release-and-its-automated-processes#finding-all-packages-that-have-unpublished-changes",children:"script from above"}),"."]}),"\n",(0,s.jsx)(a.p,{children:"If you want to bump package version and publish it to npm registry, your version change should be exactly in the last commit. This is because of two things:"}),"\n",(0,s.jsxs)(a.ol,{children:["\n",(0,s.jsxs)(a.li,{children:["If multiple commits are merged to ",(0,s.jsx)(a.code,{children:"main"})," branch at the same time, CircleCI will execute workflows only once on top of the latest commit."]}),"\n",(0,s.jsxs)(a.li,{children:["To determine that version was changed we ",(0,s.jsx)(a.a,{href:"https://github.com/facebook/react-native/blob/daeee2a6619db59391de3b7c6e08db0dbe2331aa/scripts/monorepo/find-and-publish-all-bumped-packages.js#L32-L35",children:"evaluate the difference between HEAD and HEAD~1"}),"."]}),"\n"]}),"\n",(0,s.jsx)(a.p,{children:"Example script output, where no package versions were changed:"}),"\n",(0,s.jsx)("img",{width:"800",alt:"Screenshot 2023-01-03 at 12 21 01",src:"https://user-images.githubusercontent.com/28902667/210362611-97530b4d-0405-499c-9a3c-5542e069e929.png"}),"\n",(0,s.jsx)(a.h2,{id:"align-package-versions-across-monorepo",children:"Align package versions across monorepo"}),"\n",(0,s.jsx)(a.h4,{id:"use-case-1",children:"Use case"}),"\n",(0,s.jsxs)(a.p,{children:["You (or someone from release cycle team) want to verify that the latest versions of @react-native/* packages are specified across monorepo, including ",(0,s.jsx)(a.code,{children:"template"}),"."]}),"\n",(0,s.jsx)(a.h4,{id:"how-to-execute-1",children:"How to execute"}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.code,{children:"yarn align-package-versions"})}),"\n",(0,s.jsx)(a.h4,{id:"pseudocode-2",children:"Pseudocode"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{children:"check that no git changes are present\n\nfor each package x:\n   for each package y:\n       if y has x as dependency:\n           validate that y uses the latest version of x\n"})})]})}const h=function(e={}){const{wrapper:a}=Object.assign({},(0,t.ah)(),e.components);return a?(0,s.jsx)(a,Object.assign({},e,{children:(0,s.jsx)(l,e)})):l(e)}},71426:(e,a,n)=>{var s=n(27378),t=Symbol.for("react.element"),i=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,c=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,r={key:!0,ref:!0,__self:!0,__source:!0};function d(e,a,n){var s,i={},d=null,l=null;for(s in void 0!==n&&(d=""+n),void 0!==a.key&&(d=""+a.key),void 0!==a.ref&&(l=a.ref),a)o.call(a,s)&&!r.hasOwnProperty(s)&&(i[s]=a[s]);if(e&&e.defaultProps)for(s in a=e.defaultProps)void 0===i[s]&&(i[s]=a[s]);return{$$typeof:t,type:e,key:d,ref:l,props:i,_owner:c.current}}a.Fragment=i,a.jsx=d,a.jsxs=d},24246:(e,a,n)=>{e.exports=n(71426)},71670:(e,a,n)=>{n.d(a,{Zo:()=>c,ah:()=>i});var s=n(27378);const t=s.createContext({});function i(e){const a=s.useContext(t);return s.useMemo((()=>"function"==typeof e?e(a):{...a,...e}),[a,e])}const o={};function c({components:e,children:a,disableParentContext:n}){let c;return c=n?"function"==typeof e?e({}):e||o:i(e),s.createElement(t.Provider,{value:c},a)}}}]);